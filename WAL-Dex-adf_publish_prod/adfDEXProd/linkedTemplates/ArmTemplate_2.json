{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfDEXProd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Get_Conf_Data_From_BC_Internal_ILG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Messages From BC",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Service Config",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Access_Token_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": {
										"value": "Authorization:Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessTokenILG}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
										"type": "Expression"
									},
									"requestBody": {
										"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <GetOutboundMessages xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n          <messageXML></messageXML>\n        </GetOutboundMessages>\n    </soap:Body>\n</soap:Envelope>",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"dataset": {
								"referenceName": "Http_BC_WebService",
								"type": "DatasetReference",
								"parameters": {
									"RelUrl": {
										"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Check If Record Is Array",
						"description": "if record is array -> pass value as it is\nelse -> create array of that single record \n            and pass ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Messages From BC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@startswith(string(json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement),'[')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create Array For One Record",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageAcknowledgement",
										"value": {
											"value": "@createArray(json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Send Array As It Is",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageAcknowledgement",
										"value": {
											"value": "@json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Empty Record",
						"description": "Check If empty record exists in MessageAcknowledgement \nthen FilteredMessageAcknowledgement will be empty otherwise it will be filled",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Check If Record Is Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('MessageAcknowledgement')",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(variables('MessageAcknowledgement')[0].Id,'0'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set FilteredEmptyMessageAcknowledgement",
						"description": "Fill the FilteredMessageAcknowledgement  Array after filtering the record",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filter Empty Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilteredEmptyMessageAcknowledgement",
							"value": {
								"value": "@activity('Filter Empty Record').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Service Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
								"storedProcedureParameters": {
									"ServiceCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ServiceCode",
											"type": "Expression"
										}
									},
									"SiteCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SiteCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Outb_Doc_Response",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get_Access_Token_DB",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM DEX_Oauth_Access_Token",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Oauth_Access_Token",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set FilteredEmptyMessageAcknowledgement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@{not(empty(variables('FilteredEmptyMessageAcknowledgement')))}",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Filter Ecom Orders",
									"description": "Get only SO and PO and MD Files",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@variables('FilteredEmptyMessageAcknowledgement')",
											"type": "Expression"
										},
										"condition": {
											"value": "@not(\n        or(\n            or(equals(item().MessageType,'Order Confirmations'),equals(item().MessageType,'Shipment')),\n            equals(item().MessageType,'Inventory')\n          )\n    )",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set FilteredMessageAcknowledgement",
									"description": "Fill the FilteredMessageAcknowledgement  Array after filtering the record",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Filter Ecom Orders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FilteredMessageAcknowledgement",
										"value": {
											"value": "@activity('Filter Ecom Orders').output.value",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "For Each Message Acknowledgement",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FilteredMessageAcknowledgement')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Update BC Response",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_BC_Outbound_Document_Response_ILG]",
											"storedProcedureParameters": {
												"BCMessageID": {
													"type": "Int32",
													"value": {
														"value": "@{item().Id}",
														"type": "Expression"
													}
												},
												"Direction": {
													"type": "String",
													"value": {
														"value": "@{item().Direction}",
														"type": "Expression"
													}
												},
												"MessageType": {
													"type": "String",
													"value": {
														"value": "@{item().MessageType}",
														"type": "Expression"
													}
												},
												"PayLoad": {
													"type": "String",
													"value": {
														"value": "@{item().Payload}",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@{item().SiteCode}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Load BC Outbound Data CSV",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update BC Response",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Load BC Outbound Data CSV ILG]",
										"storedProcedureParameters": {
											"BCMessageID": {
												"value": {
													"value": "@activity('Update BC Response').output.firstRow.BCMessageID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServiceCode": {
						"type": "string",
						"defaultValue": "GetOutboundMessages"
					},
					"SiteCode": {
						"type": "string"
					}
				},
				"variables": {
					"MessageAcknowledgement": {
						"type": "Array"
					},
					"FilteredEmptyMessageAcknowledgement": {
						"type": "Array"
					},
					"FilteredMessageAcknowledgement": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ILG Confirmations"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-16T06:42:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_Data_From_BC_Internal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Outband Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Message Acknowledgement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Load BC Outbound Data]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Inb_Docs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Messages From BC",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Service Config",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Access_Token_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": {
										"value": "Authorization:Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
										"type": "Expression"
									},
									"requestBody": {
										"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <GetOutboundMessages xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n          <messageXML></messageXML>\n        </GetOutboundMessages>\n    </soap:Body>\n</soap:Envelope>",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"dataset": {
								"referenceName": "Http_BC_WebService",
								"type": "DatasetReference",
								"parameters": {
									"RelUrl": {
										"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Message Acknowledgement",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set FilteredMessageAcknowledgement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FilteredMessageAcknowledgement')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Update BC Response",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_BC_Outbound_Document_Response]",
											"storedProcedureParameters": {
												"BCMessageID": {
													"type": "Int32",
													"value": {
														"value": "@{item().Id}",
														"type": "Expression"
													}
												},
												"Direction": {
													"type": "String",
													"value": {
														"value": "@{item().Direction}",
														"type": "Expression"
													}
												},
												"MessageType": {
													"type": "String",
													"value": {
														"value": "@{item().MessageType}",
														"type": "Expression"
													}
												},
												"PayLoad": {
													"type": "String",
													"value": {
														"value": "@{item().Payload}",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@{item().SiteCode}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "Check If Record Is Array",
						"description": "if record is array -> pass value as it is\nelse -> create array of that single record \n            and pass ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Messages From BC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@startswith(string(json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement),'[')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create Array For One Record",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageAcknowledgement",
										"value": {
											"value": "@createArray(json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Send Array As It Is",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageAcknowledgement",
										"value": {
											"value": "@json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Empty Record",
						"description": "Check If empty record exists in MessageAcknowledgement \nthen FilteredMessageAcknowledgement will be empty otherwise it will be filled",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Check If Record Is Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('MessageAcknowledgement')",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(variables('MessageAcknowledgement')[0].Id,'0'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set FilteredMessageAcknowledgement",
						"description": "Fill the FilteredMessageAcknowledgement  Array after filtering the record",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filter Empty Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilteredMessageAcknowledgement",
							"value": {
								"value": "@activity('Filter Empty Record').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Service Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
								"storedProcedureParameters": {
									"ServiceCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ServiceCode",
											"type": "Expression"
										}
									},
									"SiteCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SiteCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Outb_Doc_Response",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get_Access_Token_DB",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM DEX_Oauth_Access_Token",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Oauth_Access_Token",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServiceCode": {
						"type": "string",
						"defaultValue": "GetOutboundMessages"
					},
					"SiteCode": {
						"type": "string"
					}
				},
				"variables": {
					"MessageAcknowledgement": {
						"type": "Array"
					},
					"FilteredMessageAcknowledgement": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Ecom"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-16T06:42:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_Ecom_Data_From_BC_Internal_ILG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Messages From BC",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Service Config",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get_Access_Token_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": {
										"value": "Authorization:Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
										"type": "Expression"
									},
									"requestBody": {
										"value": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <GetOutboundMessages xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n          <messageXML></messageXML>\n        </GetOutboundMessages>\n    </soap:Body>\n</soap:Envelope>",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"dataset": {
								"referenceName": "Http_BC_WebService",
								"type": "DatasetReference",
								"parameters": {
									"RelUrl": {
										"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Check If Record Is Array",
						"description": "if record is array -> pass value as it is\nelse -> create array of that single record \n            and pass ",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Messages From BC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@startswith(string(json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement),'[')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Create Array For One Record",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageAcknowledgement",
										"value": {
											"value": "@createArray(json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Send Array As It Is",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MessageAcknowledgement",
										"value": {
											"value": "@json(xml(replace(string(xml(activity('Get Messages From BC').output.value[0])), ':', ''))).Envelope.Body.GetOutboundMessages_Result.messageXML.MessageAcknowledgement",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Empty Record",
						"description": "Check If empty record exists in MessageAcknowledgement \nthen FilteredMessageAcknowledgement will be empty otherwise it will be filled",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Check If Record Is Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('MessageAcknowledgement')",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(variables('MessageAcknowledgement')[0].Id,'0'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set FilteredEmptyMessageAcknowledgement",
						"description": "Fill the FilteredMessageAcknowledgement  Array after filtering the record",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Filter Empty Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilteredEmptyMessageAcknowledgement",
							"value": {
								"value": "@activity('Filter Empty Record').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Service Config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
								"storedProcedureParameters": {
									"ServiceCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ServiceCode",
											"type": "Expression"
										}
									},
									"SiteCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SiteCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Outb_Doc_Response",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get_Access_Token_DB",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM DEX_Oauth_Access_Token",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Oauth_Access_Token",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set FilteredEmptyMessageAcknowledgement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@{not(empty(variables('FilteredEmptyMessageAcknowledgement')))}",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Filter Conf Orders",
									"description": "Get only Ecom Files",
									"type": "Filter",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@variables('FilteredEmptyMessageAcknowledgement')",
											"type": "Expression"
										},
										"condition": {
											"value": "@not(\n        or(\n            or(equals(item().MessageType,'ILG Sale Order'),equals(item().MessageType,'ILG Purchase Order')),\n            equals(item().MessageType,'Master Data')\n          )\n    )",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set FilteredMessageAcknowledgement",
									"description": "Fill the FilteredMessageAcknowledgement  Array after filtering the record",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Filter Conf Orders",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FilteredMessageAcknowledgement",
										"value": {
											"value": "@activity('Filter Conf Orders').output.value",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "For Each Message Acknowledgement",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FilteredMessageAcknowledgement')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Update BC Response_Default",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_BC_Outbound_Document_Response_ILG]",
											"storedProcedureParameters": {
												"BCMessageID": {
													"type": "Int32",
													"value": {
														"value": "@{item().Id}",
														"type": "Expression"
													}
												},
												"Direction": {
													"type": "String",
													"value": {
														"value": "@{item().Direction}",
														"type": "Expression"
													}
												},
												"MessageType": {
													"type": "String",
													"value": {
														"value": "@{item().MessageType}",
														"type": "Expression"
													}
												},
												"PayLoad": {
													"type": "String",
													"value": {
														"value": "@{item().Payload}",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@{item().SiteCode}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Load BC Outbound Data XML ILG",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update BC Response_Default",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Load BC Outbound Data XML ILG]",
										"storedProcedureParameters": {
											"BCMessageID": {
												"value": {
													"value": "@activity('Update BC Response_Default').output.firstRow.BCMessageID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServiceCode": {
						"type": "string",
						"defaultValue": "GetOutboundMessages"
					},
					"SiteCode": {
						"type": "string"
					}
				},
				"variables": {
					"MessageAcknowledgement": {
						"type": "Array"
					},
					"FilteredEmptyMessageAcknowledgement": {
						"type": "Array"
					},
					"FilteredMessageAcknowledgement": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Ecom"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-16T06:42:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "Copy A File",
						"description": "Copy a file from the source store to the destination store.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								},
								"recursive": false
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "Storage_Source_Des_File_Blob",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Storage_Source_Des_File_Blob",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.DestinationStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.DestinationStore_Directory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "String"
					},
					"SourceStore_Directory": {
						"type": "String"
					},
					"DestinationStore_Location": {
						"type": "String"
					},
					"DestinationStore_Directory": {
						"type": "String"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Common Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-14T16:23:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Save_Rec_Data_To_DB_Internal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Matched Orders",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.MatchedOrdersArray",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Matched Orders XML",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Matched_Recon_Shipments]",
											"storedProcedureParameters": {
												"DexInterfaceDocMID": {
													"type": "Int32",
													"value": {
														"value": "@item().DexInterfaceDocMID",
														"type": "Expression"
													}
												},
												"OrderNo": {
													"type": "String",
													"value": {
														"value": "@item().Order_Number",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Rec_Interface_Document",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Update_Dex_Rec_Interface_Document",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Get Matched Orders XML",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Dex_Rec_Interface_Document]",
										"storedProcedureParameters": {
											"Order_Number": {
												"value": {
													"value": "@item().Order_Number",
													"type": "Expression"
												},
												"type": "String"
											},
											"ReconXML": {
												"value": {
													"value": "@activity('Get Matched Orders XML').output.firstRow.ReconXML",
													"type": "Expression"
												},
												"type": "String"
											},
											"SiteCode": {
												"value": {
													"value": "@item().SiteCode",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MatchedOrdersArray": {
						"type": "array"
					}
				},
				"folder": {
					"name": "Reconciliation"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send_Conf_To_BC_EDI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Interface Docs For BC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  [MessageID]\n\t , [Direction]\n      ,[SiteCode]\n      ,[MessageDate]\n      ,[MessageType]\n      ,[CreatedOn]\n      ,[Exported]\n      ,[ExportedOn]\n      ,[LastUpdatedOn]\n      ,[FileData]\n      ,[FileName]\n      ,[BCMessageID]\n  FROM [dbo].[DEX_Interface_Document]\n  WHERE Exported =  0\n\t\tAND InterfaceCode IN ('IBEDISC')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Inb_Docs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Document",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Interface Docs For BC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Interface Docs For BC').output.value\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Service Config",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration_EDI]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.ServiceCode",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Mark Document Exported",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Document To BC_EDI",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Update_Exported_Message]",
											"storedProcedureParameters": {
												"MessageID": {
													"type": "Int32",
													"value": {
														"value": "@item().MessageID",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Update Interface Documents",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Mark Document Exported",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_BC_Message ID_From_Response]"
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Send Document To BC_EDI",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get_Access_Token_DB_EDI",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "v2.0/ac636b3d-2eb0-41e7-b5a6-7e15645731e9/SandboxDev/WS/We%20Are%20Luxe%20-%20Live/Codeunit/MessageMgmt"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB_EDI').output.firstRow.AccessTokenEDI}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "@{concat('<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <CreateMessage xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n            <xMLData>\n                <MessageAcknowledgement xmlns=\"urn:microsoft-dynamics-nav/xmlports/x52000\">\n                    <Id/>\n                    <MessageType>',\n\n            item().MessageType \n,'</MessageType>\n                    <Direction>Inbound</Direction>\n                    <Payload>\n                        <![CDATA[ ',\n\n            item().FileData \n,'\n                           ]]>\n\t\t\t\t\t\n                    </Payload>\n                    <Status>Unprocessed</Status>\n                    <ExternalRefID>\n                    <![CDATA[ ',\n\n            item().MessageID\n,'\n                           ]]> \n                   </ExternalRefID>\n                  <SiteCode>\n                  <![CDATA[ ',\n\n            item().SiteCode\n,'\n                           ]]> \n               </SiteCode>\n                </MessageAcknowledgement>\n            </xMLData>\n        </CreateMessage>\n    </soap:Body>\n</soap:Envelope>')}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['Soap:Envelope']['Soap:Body']['CreateMessage_Result']['xMLData']['MessageAcknowledgement']['Id']"
													},
													"sink": {
														"name": "BCMessageID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['Soap:Envelope']['Soap:Body']['CreateMessage_Result']['xMLData']['MessageAcknowledgement']['ExternalRefID']"
													},
													"sink": {
														"name": "MessageID",
														"type": "Int32"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tab_DEX_Interface_Docs_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Get_Access_Token_DB_EDI",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Service Config",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM DEX_Oauth_Access_Token",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Oauth_Access_Token",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServiceCode": {
						"type": "string",
						"defaultValue": "CreateMessage"
					}
				},
				"folder": {
					"name": "EDI Confirmations"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-27T05:03:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send_Conf_To_BC_ILG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Interface Docs For BC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  [MessageID]\n\t , [Direction]\n      ,[SiteCode]\n      ,[MessageDate]\n      ,[MessageType]\n      ,[CreatedOn]\n      ,[Exported]\n      ,[ExportedOn]\n      ,[LastUpdatedOn]\n      ,replace([FileDataCsv],'ï»¿','') AS FileDataCsv\n      ,[FileName]\n      ,[BCMessageID]\n  FROM [dbo].[DEX_Interface_Document]\n  WHERE Exported =  0\n\t\tAND InterfaceCode IN ('IBILGDC', 'IBILGPOC')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Inb_Docs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Document",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Interface Docs For BC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Interface Docs For BC').output.value\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Service Config",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.ServiceCode",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Mark Document Exported",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Document To BC_ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Update_Exported_Message]",
											"storedProcedureParameters": {
												"MessageID": {
													"type": "Int32",
													"value": {
														"value": "@item().MessageID",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Update Interface Documents",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Mark Document Exported",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_BC_Message ID_From_Response]"
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Send Document To BC_ILG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get_Access_Token_DB_ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "v2.0/ac636b3d-2eb0-41e7-b5a6-7e15645731e9/SandboxDev/WS/We%20Are%20Luxe%20-%20Live/Codeunit/MessageMgmt"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB_ILG').output.firstRow.AccessTokenILG}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "@{concat('<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <CreateMessage xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n            <xMLData>\n                <MessageAcknowledgement xmlns=\"urn:microsoft-dynamics-nav/xmlports/x52000\">\n                    <Id/>\n                    <MessageType>',\n\n            item().MessageType \n,'</MessageType>\n                    <Direction>Inbound</Direction>\n                    <Payload>\n                        <![CDATA[ ',\n\n            item().FileDataCsv \n,'\n                           ]]>\n\t\t\t\t\t\n                    </Payload>\n                    <Status>Unprocessed</Status>\n                    <ExternalRefID>\n                    <![CDATA[ ',\n\n            item().MessageID\n,'\n                           ]]> \n                   </ExternalRefID>\n                  <SiteCode>\n                  <![CDATA[ ',\n\n            item().SiteCode\n,'\n                           ]]> \n               </SiteCode>\n                </MessageAcknowledgement>\n            </xMLData>\n        </CreateMessage>\n    </soap:Body>\n</soap:Envelope>')}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['Soap:Envelope']['Soap:Body']['CreateMessage_Result']['xMLData']['MessageAcknowledgement']['Id']"
													},
													"sink": {
														"name": "BCMessageID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['Soap:Envelope']['Soap:Body']['CreateMessage_Result']['xMLData']['MessageAcknowledgement']['ExternalRefID']"
													},
													"sink": {
														"name": "MessageID",
														"type": "Int32"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tab_DEX_Interface_Docs_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Get_Access_Token_DB_ILG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Service Config",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM DEX_Oauth_Access_Token",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Oauth_Access_Token",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServiceCode": {
						"type": "string",
						"defaultValue": "CreateMessage"
					}
				},
				"folder": {
					"name": "ILG Confirmations"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-27T05:03:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send_Data_To_BC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Interface Docs For BC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [MessageID]\n\t , [Direction]\n      ,[SiteCode]\n      ,[MessageDate]\n      ,[MessageType]\n      ,[CreatedOn]\n      ,[Exported]\n      ,[ExportedOn]\n      ,[LastUpdatedOn]\n      ,[FileData]\n      ,[FileName]\n      ,[BCMessageID]\n  FROM [dbo].[DEX_Interface_Document]\n  WHERE  Exported = 0\n  AND InterfaceCode IN ('IBPDRINV', 'IBPDRSHIP','IBWCSO')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Inb_Docs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Document",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Interface Docs For BC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Interface Docs For BC').output.value\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Send Document To BC",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get Service Config",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get_Access_Token_DB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "v2.0/ac636b3d-2eb0-41e7-b5a6-7e15645731e9/SandboxDev/WS/We%20Are%20Luxe%20-%20Live/Codeunit/MessageMgmt"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "@{concat('<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <CreateMessage xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n            <xMLData>\n                <MessageAcknowledgement xmlns=\"urn:microsoft-dynamics-nav/xmlports/x52000\">\n                    <Id/>\n                    <MessageType>',\n\n            item().MessageType \n,'</MessageType>\n                    <Direction>Inbound</Direction>\n                    <Payload>\n                        <![CDATA[ ',\n\n            item().FileData \n,'\n                           ]]>\n\t\t\t\t\t\n                    </Payload>\n                    <Status>Unprocessed</Status>\n                    <ExternalRefID>\n                    <![CDATA[ ',\n\n            item().MessageID\n,'\n                           ]]> \n                   </ExternalRefID>\n                  <SiteCode>\n                  <![CDATA[ ',\n\n            item().SiteCode\n,'\n                           ]]> \n               </SiteCode>\n                </MessageAcknowledgement>\n            </xMLData>\n        </CreateMessage>\n    </soap:Body>\n</soap:Envelope>')}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['Soap:Envelope']['Soap:Body']['CreateMessage_Result']['xMLData']['MessageAcknowledgement']['Id']"
													},
													"sink": {
														"name": "BCMessageID",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['Soap:Envelope']['Soap:Body']['CreateMessage_Result']['xMLData']['MessageAcknowledgement']['ExternalRefID']"
													},
													"sink": {
														"name": "MessageID",
														"type": "Int32"
													}
												}
											],
											"collectionReference": ""
										}
									},
									"inputs": [
										{
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tab_DEX_Interface_Docs_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Get Service Config",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": "CreateMessage"
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Mark Document Exported",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Send Document To BC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Update_Exported_Message]",
											"storedProcedureParameters": {
												"MessageID": {
													"type": "Int32",
													"value": {
														"value": "@item().MessageID",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Update Interface Documents",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Mark Document Exported",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_BC_Message ID_From_Response]"
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Get_Access_Token_DB",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM DEX_Oauth_Access_Token",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Oauth_Access_Token",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ecom"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-27T05:03:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send_Rec_File_To_BS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Site Codes",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT distinct SiteCode \nfrom DEX_Rec_Interface_Document",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Site_Config",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach SiteCode",
						"description": "Get Shipment XML Of the day for each site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Site Codes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Site Codes').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Recon XML",
									"description": "Get One Recon XML From DB By Combining all XMLs of day",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Recon_File]",
											"storedProcedureParameters": {
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Site_Config",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Save Recon XML",
									"description": "Insert that one XML in DB",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Recon XML",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_Recon_Files]",
											"storedProcedureParameters": {
												"Direction": {
													"type": "String",
													"value": "Outbound"
												},
												"ReconXML": {
													"type": "String",
													"value": {
														"value": "@activity('Get Recon XML').output.firstRow.ReconXML",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_Dex_Interface_Document",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Get Saved Recon XML Details",
									"description": "To Get MessageType and other details of saved Recon XML Record",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Save Recon XML",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT MessageType \nFROM DEX_Interface_Document \nWHERE MessageID = @{activity('Save Recon XML').output.firstRow.NewFileID}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_Dex_Interface_Document",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Create File From DB to Blob",
									"description": "Create XML File of Recon XML and save in Blob Storage ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get Saved Recon XML Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_OutBound_Msg_Detail]",
											"storedProcedureParameters": {
												"MessageID": {
													"type": "Int32",
													"value": {
														"value": "@{activity('Save Recon XML').output.firstRow.NewFileID}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "FileData",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"type": "String",
														"physicalType": "String",
														"ordinal": 1
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_Save_OB_File_In_Blob",
											"type": "DatasetReference",
											"parameters": {
												"SiteCode": {
													"value": "@{item().SiteCode}",
													"type": "Expression"
												},
												"MessageType": {
													"value": "@{activity('Get Saved Recon XML Details').output.firstRow.MessageType}",
													"type": "Expression"
												},
												"MessageId": {
													"value": "@{activity('Save Recon XML').output.firstRow.NewFileID}",
													"type": "Expression"
												},
												"Container": "obrecdrop"
											}
										}
									]
								},
								{
									"name": "Update Exported Messages",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Create File From DB to Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Exported_Message]",
										"storedProcedureParameters": {
											"MessageID": {
												"value": {
													"value": "@{activity('Save Recon XML').output.firstRow.NewFileID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Reconciliation"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Temp_Oauth_Test_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get_BC_Access_Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get_Oauth_Service_Configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('Get_Oauth_Service_Configuration').output.firstRow.ServiceURL",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Content-type": {
									"value": "@activity('Get_Oauth_Service_Configuration').output.firstRow.ContentType",
									"type": "Expression"
								}
							},
							"body": {
								"value": "grant_type=@{activity('Get_Oauth_Service_Configuration').output.firstRow.GrantType}\n&client_id=@{activity('Get_Oauth_Service_Configuration').output.firstRow.ClientID}\n&client_secret=@{activity('Get_Oauth_Service_Configuration').output.firstRow.ClientSecret}\n&scope=@{activity('Get_Oauth_Service_Configuration').output.firstRow.Scope}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get_Access_Token_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://api.businesscentral.dynamics.com/v2.0/ac636b3d-2eb0-41e7-b5a6-7e15645731e9/Production/WS/We%20Are%20Luxe%20-%20Live/Page/Vendor_Ledger_Entries",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get_Oauth_Service_Configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Get_Oauth_Service_Configuration]",
								"storedProcedureParameters": {
									"ServiceCode": {
										"type": "String",
										"value": "GetOauthConfig"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Oauth_Config",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Update_Oauth_Access_Token_DB",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get_BC_Access_Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[Update_Oauth_Access_Token]",
							"storedProcedureParameters": {
								"AccessToken": {
									"value": {
										"value": "@activity('Get_BC_Access_Token').output.access_token",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DEXInterfaceProd",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get_Access_Token_DB",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Oauth_Access_Token_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM DEX_Oauth_Access_Token",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Oauth_Access_Token",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Temporary"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Temp_Oauth_Test_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get_Access_Token_DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://api.businesscentral.dynamics.com/v2.0/ac636b3d-2eb0-41e7-b5a6-7e15645731e9/Production/WS/We%20Are%20Luxe%20-%20Live/Codeunit/MessageMgmt",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}",
									"type": "Expression"
								},
								"Content-Type": "application/xml",
								"soapAction": "urn:microsoft-dynamics-schemas/codeunit/MessageMgmt:CreateMessage"
							},
							"body": {
								"value": "@{concat('<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soap:Body>\n        <CreateMessage xmlns=\"urn:microsoft-dynamics-schemas/codeunit/MessageMgmt\">\n            <xMLData>\n                <MessageAcknowledgement xmlns=\"urn:microsoft-dynamics-nav/xmlports/x52000\">\n                    <Id/>\n                    <MessageType>',\n\n            '' \n,'</MessageType>\n                    <Direction>Inbound</Direction>\n                    <Payload>\n                        <![CDATA[ ',\n\n            '' \n,'\n                           ]]>\n\t\t\t\t\t\n                    </Payload>\n                    <Status>Unprocessed</Status>\n                    <ExternalRefID>\n                    <![CDATA[ ',\n\n            '112'\n,'\n                           ]]> \n                   </ExternalRefID>\n                  <SiteCode>\n                  <![CDATA[ ',\n\n            ''\n,'\n                           ]]> \n               </SiteCode>\n                </MessageAcknowledgement>\n            </xMLData>\n        </CreateMessage>\n    </soap:Body>\n</soap:Envelope>')}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get_Access_Token_DB",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM DEX_Oauth_Access_Token",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Oauth_Access_Token",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Temporary"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update_BC_Message_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Doc List To Confirm",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT SiteCode,MessageID,BCMessageID  \nFROM [dbo].[DEX_Interface_Document] \nWHERE ISNULL([ConfirmationSentToBC],0) = 0 \n\t  AND InterfaceCode IN ('OBWCINV','OBWCORDCON','OBWCSHIP')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Inb_Docs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Document",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Doc List To Confirm",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Doc List To Confirm').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Soap Keys",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Service Config",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get_Access_Token_DB",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}\nContent-Type:@{activity('Get Service Config').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dex=\"urn:microsoft-dynamics-schemas/page/dexmessagequeuecard\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dex:Read>\n         <dex:ID>@{item().BCMessageID}</dex:ID>\n      </dex:Read>\n   </soapenv:Body>\n</soapenv:Envelope>",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": true
											}
										},
										"dataset": {
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Update BC Confirmation",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Update External Reference",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Update_BC_Confirmation_Of_OB_Msg]",
											"storedProcedureParameters": {
												"BCMessageID": {
													"type": "String",
													"value": {
														"value": "@{item().BCMessageID}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Update External Reference",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Service Config For Site",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB').output.firstRow.AccessToken}\nContent-Type:@{activity('Get Service Config For Site').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config For Site').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dex=\"urn:microsoft-dynamics-schemas/page/dexmessagequeuecard\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dex:Update>\n         <dex:DexMessageQueueCard>\n            \n            <dex:Key>@{json(xml(replace(string(xml(activity('Get Soap Keys').output.value[0])), ':', ''))).Envelope.Body.Read_Result.DexMessageQueueCard.Key}</dex:Key>\n            \n            <dex:External_Reference_ID>@{item().MessageID}</dex:External_Reference_ID>\n            \n            <dex:ID>@{item().BCMessageID}</dex:ID>\n            <dex:Status>Processed</dex:Status>\n         </dex:DexMessageQueueCard>\n      </dex:Update>\n   </soapenv:Body>\n</soapenv:Envelope>",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"namespaces": true
											}
										},
										"dataset": {
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config For Site').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Get Service Config",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": {
														"value": "ReadOutboundMessages",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get Service Config For Site",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Soap Keys",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": {
														"value": "UpdateOutboundMessages",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get_Access_Token_DB",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM DEX_Oauth_Access_Token",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Oauth_Access_Token",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SoapKey": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ecom"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-15T04:29:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update_ILG_BC_Message_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Doc List To Confirm ILG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT SiteCode,MessageID,BCMessageID, InterfaceCode  \nFROM [dbo].[DEX_Interface_Document] \nWHERE ISNULL([ConfirmationSentToBC],0) = 0 \nAND InterfaceCode IN ('OBILGSO','OBILGPO','OBILGMD')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_BC_Inb_Docs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Document ILG",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Doc List To Confirm ILG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Doc List To Confirm ILG').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Update BC Confirmation ILG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Update External Reference ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Update_BC_Confirmation_Of_OB_Msg]",
											"storedProcedureParameters": {
												"BCMessageID": {
													"type": "String",
													"value": {
														"value": "@{item().BCMessageID}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Inb_Docs",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Update External Reference ILG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Service Config For Site ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB_ILG').output.firstRow.AccessTokenILG}\nContent-Type:@{activity('Get Service Config For Site ILG').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config For Site ILG').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dex=\"urn:microsoft-dynamics-schemas/page/dexmessagequeuecard\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dex:Update>\n         <dex:DexMessageQueueCard>\n            \n            <dex:Key>@{json(xml(replace(string(xml(activity('Get Soap Keys ILG').output.value[0])), ':', ''))).Envelope.Body.Read_Result.DexMessageQueueCard.Key}</dex:Key>\n            \n            <dex:External_Reference_ID>@{item().MessageID}</dex:External_Reference_ID>\n            \n            <dex:ID>@{item().BCMessageID}</dex:ID>\n            <dex:Status>Processed</dex:Status>\n         </dex:DexMessageQueueCard>\n      </dex:Update>\n   </soapenv:Body>\n</soapenv:Envelope>",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"namespaces": true
											}
										},
										"dataset": {
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config For Site ILG').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Get Service Config ILG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.ServiceCode",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get Service Config For Site ILG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Soap Keys ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Get_Service_Configuration]",
											"storedProcedureParameters": {
												"ServiceCode": {
													"type": "String",
													"value": {
														"value": "UpdateOutboundMessages",
														"type": "Expression"
													}
												},
												"SiteCode": {
													"type": "String",
													"value": {
														"value": "@item().SiteCode",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_BC_Outb_Doc_Response",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get Soap Keys ILG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Service Config ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Get_Access_Token_DB_ILG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "XmlSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "POST",
												"additionalHeaders": {
													"value": "Authorization:Bearer @{activity('Get_Access_Token_DB_ILG').output.firstRow.AccessTokenILG}\nContent-Type:@{activity('Get Service Config ILG').output.firstRow.ContentType}\nsoapAction:@{activity('Get Service Config ILG').output.firstRow.SoapAction}",
													"type": "Expression"
												},
												"requestBody": {
													"value": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:dex=\"urn:microsoft-dynamics-schemas/page/dexmessagequeuecard\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dex:Read>\n         <dex:ID>@{item().BCMessageID}</dex:ID>\n      </dex:Read>\n   </soapenv:Body>\n</soapenv:Envelope>",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "XmlReadSettings",
												"validationMode": "none",
												"detectDataType": true,
												"namespaces": true
											}
										},
										"dataset": {
											"referenceName": "Http_BC_WebService",
											"type": "DatasetReference",
											"parameters": {
												"RelUrl": {
													"value": "@activity('Get Service Config ILG').output.firstRow.RelativeURL",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Get_Access_Token_DB_ILG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM DEX_Oauth_Access_Token",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Oauth_Access_Token",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServiceCode": {
						"type": "string",
						"defaultValue": "ReadOutboundMessages"
					}
				},
				"variables": {
					"SoapKey": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ILG Confirmations"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-15T04:29:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upload_Files_To_WC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File List",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Storage_Source_Destination_Blob",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get interface Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type,'File'),equals(substring(item().name,add(indexof(item().name,'_'),1),sub(lastindexof(item().name,'_'),add(indexof(item().name,'_'),1))),activity('Get interface Info').output.value[0].Type))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each File",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Filtered Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FilteredFiles')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Move File to Processed",
									"description": "Move a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Switch For FTP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Storage_Source_Des_File_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_Source_Destination_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Switch For FTP",
									"description": "Switch to select appropriate FTP for OB Files",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{substring(item().name,0,indexOf(item().name,'_'))}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "BYUK",
												"activities": [
													{
														"name": "Uplaod UK File to Byoma FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Byoma_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "BYUS",
												"activities": [
													{
														"name": "Uplaod US File to Byoma FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Byoma_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "IOPUK",
												"activities": [
													{
														"name": "Uplaod IOPUK File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "IOP_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "IOPUS",
												"activities": [
													{
														"name": "Uplaod IOPUS File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "IOP_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "TLUK",
												"activities": [
													{
														"name": "Uplaod TLUK File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Tanluxe_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "TLUS",
												"activities": [
													{
														"name": "Uplaod TLUS File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Tanluxe_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Uplaod File to WC FTP",
												"description": "Copy a file from the source store to the destination store.",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 5,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "SftpWriteSettings",
															"operationTimeout": "01:00:00",
															"useTempFileRename": true
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "Storage_Source_Des_File_Blob",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@pipeline().parameters.SourceStore_Location",
																"type": "Expression"
															},
															"Directory": {
																"value": "@pipeline().parameters.SourceStore_Directory",
																"type": "Expression"
															},
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Tanologist_SFTP",
														"type": "DatasetReference",
														"parameters": {
															"FolderName": {
																"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get interface Info",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = '@{pipeline().parameters.Interface_Code}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Filtered Files",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilteredFiles",
							"value": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "string",
						"defaultValue": "obdrop"
					},
					"SourceStore_Directory": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationStore_Location": {
						"type": "string",
						"defaultValue": "obprocessed"
					},
					"DestinationStore_Directory": {
						"type": "string",
						"defaultValue": "/"
					},
					"Interface_Code": {
						"type": "string"
					}
				},
				"variables": {
					"FilteredFiles": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Ecom"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-15T04:28:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upload_Rec_File_To_WC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File List",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Storage_Source_Destination_Blob",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get interface Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type,'File'),equals(substring(item().name,add(indexof(item().name,'_'),1),sub(lastindexof(item().name,'_'),add(indexof(item().name,'_'),1))),activity('Get interface Info').output.value[0].Type))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each File",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Filtered Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FilteredFiles')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Move File to Processed",
									"description": "Move a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Switch For FTP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Storage_Source_Des_File_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_Source_Destination_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Switch For FTP",
									"description": "Switch to select appropriate FTP for OB Files",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{substring(item().name,0,indexOf(item().name,'_'))}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "BYUK",
												"activities": [
													{
														"name": "Uplaod UK File to Byoma FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Byoma_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "BYUS",
												"activities": [
													{
														"name": "Uplaod US File to Byoma FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Byoma_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "IOPUK",
												"activities": [
													{
														"name": "Uplaod IOPUK File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "IOP_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "IOPUS",
												"activities": [
													{
														"name": "Uplaod IOPUS File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "IOP_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "TLUK",
												"activities": [
													{
														"name": "Uplaod TLUK File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Tanluxe_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "TLUS",
												"activities": [
													{
														"name": "Uplaod TLUS File to WC FTP",
														"description": "Copy a file from the source store to the destination store.",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 5,
															"retryIntervalInSeconds": 60,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "AzureBlobStorageReadSettings",
																	"recursive": true
																},
																"formatSettings": {
																	"type": "BinaryReadSettings"
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "SftpWriteSettings",
																	"operationTimeout": "01:00:00",
																	"useTempFileRename": true
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "Storage_Source_Des_File_Blob",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@pipeline().parameters.SourceStore_Location",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@pipeline().parameters.SourceStore_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().name",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "Tanluxe_WC_SFTP",
																"type": "DatasetReference",
																"parameters": {
																	"FolderName": {
																		"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Uplaod File to WC FTP",
												"description": "Copy a file from the source store to the destination store.",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 5,
													"retryIntervalInSeconds": 60,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "SftpWriteSettings",
															"operationTimeout": "01:00:00",
															"useTempFileRename": true
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "Storage_Source_Des_File_Blob",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@pipeline().parameters.SourceStore_Location",
																"type": "Expression"
															},
															"Directory": {
																"value": "@pipeline().parameters.SourceStore_Directory",
																"type": "Expression"
															},
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Tanologist_SFTP",
														"type": "DatasetReference",
														"parameters": {
															"FolderName": {
																"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get interface Info",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = '@{pipeline().parameters.Interface_Code}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Filtered Files",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilteredFiles",
							"value": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "string",
						"defaultValue": "obrecdrop"
					},
					"SourceStore_Directory": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationStore_Location": {
						"type": "string",
						"defaultValue": "obrecprocessed"
					},
					"DestinationStore_Directory": {
						"type": "string",
						"defaultValue": "/"
					},
					"Interface_Code": {
						"type": "string",
						"defaultValue": "OBWCREC"
					}
				},
				"variables": {
					"FilteredFiles": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Reconciliation"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-15T04:28:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upload_Files_To_WC_ILG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get File List",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Storage_Source_Destination_Blob",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get interface Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get File List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type,'File'),equals(substring(item().name,add(indexof(item().name,'_'),1),sub(lastindexof(item().name,'_'),add(indexof(item().name,'_'),1))),activity('Get interface Info').output.value[0].Type))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each File",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Filtered Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('FilteredFiles')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Move File to Processed",
									"description": "Move a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Uplaod File to WC FTP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Storage_Source_Des_File_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_Source_Destination_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.DestinationStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.DestinationStore_Directory",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Uplaod File to WC FTP",
									"description": "Copy a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Storage_Source_Des_File_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@pipeline().parameters.SourceStore_Location",
													"type": "Expression"
												},
												"Directory": {
													"value": "@pipeline().parameters.SourceStore_Directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tanologist_SFTP",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move File to Processed FTP",
									"description": "Move a file from the source store to the destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Move File to Processed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": true,
												"disableChunking": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info').output.value[0].FTPProcessedDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get interface Info",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get File List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = '@{pipeline().parameters.Interface_Code}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Filtered Files",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FilteredFiles",
							"value": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "string",
						"defaultValue": "obdrop"
					},
					"SourceStore_Directory": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationStore_Location": {
						"type": "string",
						"defaultValue": "obprocessed"
					},
					"DestinationStore_Directory": {
						"type": "string",
						"defaultValue": "/"
					},
					"Interface_Code": {
						"type": "string"
					}
				},
				"variables": {
					"FilteredFiles": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ILG Confirmations"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-15T04:28:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Older_Files_From_Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Container Names",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Storage_Source_Destination_Blob",
								"type": "DatasetReference",
								"parameters": {
									"Container": "/",
									"Directory": "/"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach Container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Container Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Container Names').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Delete_Older_Files_From_Blob_Internal",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Delete_Older_Files_From_Blob_Internal",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ecom"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-30T10:13:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_Conf_Data_From_BC_ILG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Service Codes_ILG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\n SELECT TOP 1 * FROM dbo.DEX_Site_Config  \n WHERE   SiteCode LIKE'%EU%'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Site_Config",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach ServiceCode_ILG",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Service Codes_ILG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Service Codes_ILG').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get_Conf_Data_From_BC_Internal_ILG",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Get_Conf_Data_From_BC_Internal_ILG",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SiteCode": {
												"value": "@item().SiteCode",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ILG Confirmations"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-16T11:13:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get_Conf_Data_From_BC_Internal_ILG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_Conf_From_EDI_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Interface Info IBEDISCFBL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = 'IBEDISCFBL'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET WC Order Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Interface Info IBEDISCFBL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Tanologist_SFTP",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": {
										"value": "@activity('Get Interface Info IBEDISCFBL').output.value[0].FTPDropDir",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter Only Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET WC Order Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET WC Order Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each Shipment Confirmation",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files').output.Value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Load_Interface_Files_From_WC",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_Interface_Files_From_WC]",
											"storedProcedureParameters": {
												"FileName": {
													"type": "String",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Interface_Files",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy WC Order File to Azure Blob",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Load_Interface_Files_From_WC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCFBL').output.value[0].FtpDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_IB_Drop_Folder_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": "/",
												"Directory": "ibdrop",
												"filename": "*"
											}
										}
									]
								},
								{
									"name": "Update_Downloaded_File_From_WC",
									"description": "Update Downloaded File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy WC Order File to Azure Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Downloaded_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Move_Files_To_InProcess_In_Blob",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update_Downloaded_File_From_WC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibdrop",
											"DestinationStore_Location": "/",
											"DestinationStore_Directory": "ibinprocess",
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Load In Process File From Blob to Azure SQL",
									"description": "Load In Process File From Blob to Azure SQL (Interface document table)",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Move_Files_To_InProcess_In_Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Load_InProcess_Files_From_BS]",
										"storedProcedureParameters": {
											"ContainerName": {
												"value": "ibinprocess",
												"type": "String"
											},
											"DataSource": {
												"value": "AzureStorage",
												"type": "String"
											},
											"Direction": {
												"value": "Inbound",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Move_Files_To_Processed_In_Blob",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load In Process File From Blob to Azure SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibinprocess",
											"DestinationStore_Location": "/",
											"DestinationStore_Directory": "ibprocessed",
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Update_Processed_File_From_WC",
									"description": "Update Processed File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Move_Files_To_Processed_In_Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Processed_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SFTP Move WC Orders to Processed",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update_Processed_File_From_WC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCFBL').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCFBL').output.value[0].FTPProcessedDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Orders File From OBDrop",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "SFTP Move WC Orders to Processed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCFBL').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Interface Info IBEDISCWAL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Shipment Confirmation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = 'IBEDISCWAL'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET WC Order Files WAL",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Interface Info IBEDISCWAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Tanologist_SFTP",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": {
										"value": "@activity('Get Interface Info IBEDISCWAL').output.value[0].FTPDropDir",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter Only Files WAL",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET WC Order Files WAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET WC Order Files WAL').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each Shipment Confirmation WAL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files WAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files WAL').output.Value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Load_Interface_Files_From_WC_WAL",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_Interface_Files_From_WC]",
											"storedProcedureParameters": {
												"FileName": {
													"type": "String",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Interface_Files",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy WC Order File to Azure Blob WAL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Load_Interface_Files_From_WC_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCWAL').output.value[0].FtpDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_IB_Drop_Folder_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": "/",
												"Directory": "ibdrop",
												"filename": "*"
											}
										}
									]
								},
								{
									"name": "Update_Downloaded_File_From_WC_WAL",
									"description": "Update Downloaded File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy WC Order File to Azure Blob WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Downloaded_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC_WAL').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Move_Files_To_InProcess_In_Blob_WAL",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update_Downloaded_File_From_WC_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibdrop",
											"DestinationStore_Location": "/",
											"DestinationStore_Directory": "ibinprocess",
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Load In Process File From Blob to Azure SQL_WAL",
									"description": "Load In Process File From Blob to Azure SQL (Interface document table)",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Move_Files_To_InProcess_In_Blob_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Load_InProcess_Files_From_BS]",
										"storedProcedureParameters": {
											"ContainerName": {
												"value": "ibinprocess",
												"type": "String"
											},
											"DataSource": {
												"value": "AzureStorage",
												"type": "String"
											},
											"Direction": {
												"value": "Inbound",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Move_Files_To_Processed_In_Blob_WAL",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load In Process File From Blob to Azure SQL_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibinprocess",
											"DestinationStore_Location": "/",
											"DestinationStore_Directory": "ibprocessed",
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Update_Processed_File_From_WC_WAL",
									"description": "Update Processed File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Move_Files_To_Processed_In_Blob_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Processed_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC_WAL').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SFTP Move WC Orders to Processed_WAL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update_Processed_File_From_WC_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCWAL').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCWAL').output.value[0].FTPProcessedDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Orders File From OBDrop_WAL",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "SFTP Move WC Orders to Processed_WAL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBEDISCWAL').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "EDI Confirmations"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Move_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_Conf_From_ILG_FTP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Interface Info IBILGDC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = 'IBILGDC'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET WC Order Files",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Interface Info IBILGDC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Tanologist_SFTP",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": {
										"value": "@activity('Get Interface Info IBILGDC').output.value[0].FTPDropDir",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "For Each IBILGDC",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files').output.Value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Load_Interface_Files_From_WC",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_Interface_Files_From_WC]",
											"storedProcedureParameters": {
												"FileName": {
													"type": "String",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Interface_Files",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy WC Order File to Azure Blob",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Load_Interface_Files_From_WC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGDC').output.value[0].FtpDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_IB_Drop_Folder_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": "/",
												"Directory": "ibdrop",
												"filename": "*"
											}
										}
									]
								},
								{
									"name": "Update_Downloaded_File_From_WC",
									"description": "Update Downloaded File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy WC Order File to Azure Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Downloaded_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Load In Process File From Blob to Azure SQL",
									"description": "Load In Process File From Blob to Azure SQL (Interface document table)",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete CSV File From Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Load_InProcess_Files_From_BS_CSV]",
										"storedProcedureParameters": {
											"ContainerName": {
												"value": "ibinprocess",
												"type": "String"
											},
											"DataSource": {
												"value": "AzureStorage",
												"type": "String"
											},
											"Direction": {
												"value": "Inbound",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@{concat(substring(item().name,0,indexof(item().name,'.'))\n,'.',variables('FileType'))}",
													"type": "Expression"
												},
												"type": "String"
											},
											"MessageType": {
												"value": {
													"value": "@variables('MessageType_IBILGDC')",
													"type": "Expression"
												},
												"type": "String"
											},
											"SiteCode": {
												"value": {
													"value": "@variables('SiteCode')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Move_Files_To_Processed_In_Blob",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load In Process File From Blob to Azure SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibinprocess",
											"DestinationStore_Location": "/",
											"DestinationStore_Directory": "ibprocessed",
											"FileName": {
												"value": "@{concat(substring(item().name,0,indexof(item().name,'.'))\n,'.',variables('FileType'))}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Update_Processed_File_From_WC",
									"description": "Update Processed File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Move_Files_To_Processed_In_Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Processed_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SFTP Move WC Orders to Processed",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update_Processed_File_From_WC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGDC').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGDC').output.value[0].FTPProcessedDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Orders File From OBDrop",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "SFTP Move WC Orders to Processed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGDC').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Convert_CSV_To_JSON_And_Move_To_Inprocess",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update_Downloaded_File_From_WC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Convert_CSV_To_JSON_And_Move_To_Inprocess",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibdrop",
											"DestinationStore_Location": "ibinprocess",
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Delete CSV File From Blob",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Convert_CSV_To_JSON_And_Move_To_Inprocess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Storage_Source_Des_File_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": "ibdrop",
												"Directory": "/",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Only Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET WC Order Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET WC Order Files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Interface Info IBILGPOC",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each IBILGDC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DI.InterfaceCode, DI.[Enabled], DI.[Type], DI.[Direction], DI.[FTPDropDir], DI.FTPProcessedDir \nFROM dbo.DEX_Interface DI\nWHERE InterfaceCode = 'IBILGPOC'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Tab_DEX_Interface",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GET WC Order Files IBILGPOC",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Interface Info IBILGPOC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Tanologist_SFTP",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": {
										"value": "@activity('Get Interface Info IBILGPOC').output.value[0].FTPDropDir",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "For Each Purchase IBILGPOC",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files IBILGPOC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files IBILGPOC').output.Value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Load_Interface_Files_From_WC IBILGPOC",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Load_Interface_Files_From_WC]",
											"storedProcedureParameters": {
												"FileName": {
													"type": "String",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Tab_DEX_Interface_Files",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy WC Order File to Azure Blob IBILGPOC",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Load_Interface_Files_From_WC IBILGPOC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGPOC').output.value[0].FtpDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Storage_IB_Drop_Folder_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": "/",
												"Directory": "ibdrop",
												"filename": "*"
											}
										}
									]
								},
								{
									"name": "Update_Downloaded_File_From_WC IBILGPOC",
									"description": "Update Downloaded File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy WC Order File to Azure Blob IBILGPOC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Downloaded_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC IBILGPOC').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Move_Files_To_Processed_In_Blob IBILGPOC",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Load In Process File From Blob to Azure SQL_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibinprocess",
											"DestinationStore_Location": "/",
											"DestinationStore_Directory": "ibprocessed",
											"FileName": {
												"value": "@{concat(substring(item().name,0,indexof(item().name,'.'))\n,'.',variables('FileType'))}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Update_Processed_File_From_WC IBILGPOC",
									"description": "Update Processed File From WC in Interface Files Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Move_Files_To_Processed_In_Blob IBILGPOC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Update_Processed_File_From_WC]",
										"storedProcedureParameters": {
											"FileID": {
												"value": {
													"value": "@activity('Load_Interface_Files_From_WC IBILGPOC').output.firstRow.NewFileID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SFTP Move Files to Processed IBILGPOC",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Update_Processed_File_From_WC IBILGPOC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "/wc/Outbound/Drop/"
										},
										{
											"name": "Destination",
											"value": "drop//"
										}
									],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "SftpReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGPOC').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGPOC').output.value[0].FTPProcessedDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Orders File From SFTP",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "SFTP Move Files to Processed IBILGPOC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Tanologist_SFTP_Connection_With_FileName",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@activity('Get Interface Info IBILGPOC').output.value[0].FTPDropDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Convert_CSV_To_JSON_And_Move_To_Inprocess POC",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update_Downloaded_File_From_WC IBILGPOC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Convert_CSV_To_JSON_And_Move_To_Inprocess",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SourceStore_Location": "/",
											"SourceStore_Directory": "ibdrop",
											"DestinationStore_Location": "ibinprocess",
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Delete CSV File From Blob POC",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Convert_CSV_To_JSON_And_Move_To_Inprocess POC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Storage_Source_Des_File_Blob",
											"type": "DatasetReference",
											"parameters": {
												"Container": "ibdrop",
												"Directory": "/",
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Load In Process File From Blob to Azure SQL_copy1",
									"description": "Load In Process File From Blob to Azure SQL (Interface document table)",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete CSV File From Blob POC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[Load_InProcess_Files_From_BS_CSV]",
										"storedProcedureParameters": {
											"ContainerName": {
												"value": "ibinprocess",
												"type": "String"
											},
											"DataSource": {
												"value": "AzureStorage",
												"type": "String"
											},
											"Direction": {
												"value": "Inbound",
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@{concat(substring(item().name,0,indexof(item().name,'.'))\n,'.',variables('FileType'))}",
													"type": "Expression"
												},
												"type": "String"
											},
											"MessageType": {
												"value": {
													"value": "@variables('MessageType_IBILGPOC')",
													"type": "Expression"
												},
												"type": "String"
											},
											"SiteCode": {
												"value": {
													"value": "@variables('SiteCode')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "DEXInterfaceProd",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Filter Only Files IBILGPOC",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET WC Order Files IBILGPOC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET WC Order Files IBILGPOC').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SiteCode": {
						"type": "String",
						"defaultValue": "ILGEU"
					},
					"MessageType_IBILGDC": {
						"type": "String",
						"defaultValue": "ILG Sale Order"
					},
					"MessageType_IBILGPOC": {
						"type": "String",
						"defaultValue": "ILG Purchase Order"
					},
					"FileType": {
						"type": "String",
						"defaultValue": "json"
					}
				},
				"folder": {
					"name": "ILG Confirmations"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Move_Files')]"
			]
		}
	]
}